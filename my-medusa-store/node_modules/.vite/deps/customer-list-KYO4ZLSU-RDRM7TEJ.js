import {
  useCustomerTableColumns
} from "./chunk-GYX2XWXY.js";
import {
  useCustomerTableQuery
} from "./chunk-QG4LHCCG.js";
import "./chunk-VUQTMK3D.js";
import "./chunk-VZNN7GZF.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-S5JEKJNE.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-7G6GEV6X.js";
import "./chunk-HF5QS2DS.js";
import "./chunk-UHVTGAAG.js";
import "./chunk-HNSNBECS.js";
import {
  SingleColumnPage
} from "./chunk-62D4RZCU.js";
import "./chunk-32T72GVU.js";
import {
  useCustomerTableFilters
} from "./chunk-CFQHCVOA.js";
import "./chunk-MNX57DI6.js";
import "./chunk-QX6SXRUW.js";
import "./chunk-7ANVLPZR.js";
import "./chunk-5APKM53F.js";
import {
  useExtension
} from "./chunk-FTD3ZWHZ.js";
import "./chunk-Z7F5NKRC.js";
import {
  ActionMenu
} from "./chunk-EYORFNKO.js";
import "./chunk-DG4VJWMJ.js";
import "./chunk-QL4F4XO7.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-7UAYECTW.js";
import "./chunk-QKV675OM.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import {
  useCustomers
} from "./chunk-3APLRSSZ.js";
import "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import "./chunk-YEE23PNJ.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-5GF3RGIE.js";
import {
  Link
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  createColumnHelper
} from "./chunk-OMPDROWC.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-VZFGHTQI.js";
import {
  keepPreviousData
} from "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/customer-list-KYO4ZLSU.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var PAGE_SIZE = 20;
var CustomerListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useCustomerTableQuery({ pageSize: PAGE_SIZE });
  const { customers, count, isLoading, isError, error } = useCustomers(
    {
      ...searchParams
    },
    {
      placeholderData: keepPreviousData
    }
  );
  const filters = useCustomerTableFilters();
  const columns = useColumns();
  const { table } = useDataTable({
    data: customers ?? [],
    columns,
    count,
    enablePagination: true,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y p-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: t("customers.domain") }),
      (0, import_jsx_runtime.jsx)(Link, { to: "/customers/create", children: (0, import_jsx_runtime.jsx)(Button, { size: "small", variant: "secondary", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime.jsx)(
      _DataTable,
      {
        table,
        columns,
        pageSize: PAGE_SIZE,
        count,
        filters,
        orderBy: [
          { key: "email", label: t("fields.email") },
          { key: "first_name", label: t("fields.firstName") },
          { key: "last_name", label: t("fields.lastName") },
          { key: "has_account", label: t("customers.hasAccount") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ],
        isLoading,
        navigateTo: (row) => row.original.id,
        search: true,
        queryObject: raw,
        noRecords: {
          message: t("customers.list.noRecordsMessage")
        }
      }
    )
  ] });
};
var CustomerActions = ({
  customer
}) => {
  const { t } = useTranslation();
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `/customers/${customer.id}/edit`
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const columns = useCustomerTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...columns,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime.jsx)(CustomerActions, { customer: row.original })
      })
    ],
    [columns]
  );
};
var CustomersList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      widgets: {
        after: getWidgets("customer.list.after"),
        before: getWidgets("customer.list.before")
      },
      children: (0, import_jsx_runtime2.jsx)(CustomerListTable, {})
    }
  );
};
export {
  CustomersList as Component
};
//# sourceMappingURL=customer-list-KYO4ZLSU-RDRM7TEJ.js.map
