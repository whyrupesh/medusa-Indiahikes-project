import {
  useDeleteProductTagAction
} from "./chunk-FINN7NC2.js";
import {
  useProductTagTableColumns
} from "./chunk-LLQS5NEO.js";
import "./chunk-2YMVSNKK.js";
import "./chunk-OVYB2R2R.js";
import "./chunk-GYX2XWXY.js";
import "./chunk-LRHNIEK3.js";
import "./chunk-NFLWRY6D.js";
import {
  useProductTagTableQuery
} from "./chunk-DA3R6NIR.js";
import "./chunk-GDXEFZZY.js";
import "./chunk-GEC36FCE.js";
import "./chunk-ITWRYKT3.js";
import "./chunk-AYBSQXJR.js";
import "./chunk-ASBI7JIX.js";
import "./chunk-QG4LHCCG.js";
import "./chunk-I2ZOQM4X.js";
import "./chunk-CBSHVNLC.js";
import "./chunk-I45JH6GR.js";
import "./chunk-YYZKWZRU.js";
import "./chunk-QF476XOZ.js";
import "./chunk-MKZD3R7Z.js";
import "./chunk-VUQTMK3D.js";
import "./chunk-LVAKEKGS.js";
import "./chunk-5ZQBU3TD.js";
import "./chunk-3H5J2KKL.js";
import "./chunk-SFCLMDXV.js";
import "./chunk-UDMOPZAP.js";
import "./chunk-NH5L26CC.js";
import "./chunk-3M3PHA2D.js";
import "./chunk-GBWIHZ5H.js";
import "./chunk-VZNN7GZF.js";
import "./chunk-EGRHWZRV.js";
import "./chunk-S5JEKJNE.js";
import {
  _DataTable,
  useDataTable
} from "./chunk-7G6GEV6X.js";
import "./chunk-HF5QS2DS.js";
import "./chunk-UHVTGAAG.js";
import "./chunk-HNSNBECS.js";
import {
  SingleColumnPage
} from "./chunk-62D4RZCU.js";
import "./chunk-H3DTEG3J.js";
import "./chunk-32T72GVU.js";
import {
  useProductTagTableFilters
} from "./chunk-3LRISSP5.js";
import "./chunk-P5T2IZP5.js";
import "./chunk-I7242KR3.js";
import "./chunk-CFQHCVOA.js";
import "./chunk-IONS3C54.js";
import "./chunk-XNFM7P3M.js";
import "./chunk-ZIXJCBL3.js";
import "./chunk-PCB735YL.js";
import "./chunk-FWDP2OXD.js";
import "./chunk-MNX57DI6.js";
import "./chunk-QX6SXRUW.js";
import "./chunk-7ANVLPZR.js";
import "./chunk-5APKM53F.js";
import "./chunk-HPGXK5DQ.js";
import "./chunk-C5UXJTEP.js";
import {
  useExtension
} from "./chunk-FTD3ZWHZ.js";
import "./chunk-Z7F5NKRC.js";
import {
  ActionMenu
} from "./chunk-EYORFNKO.js";
import "./chunk-DG4VJWMJ.js";
import "./chunk-QL4F4XO7.js";
import "./chunk-NV2N3EWM.js";
import "./chunk-7UAYECTW.js";
import "./chunk-QKV675OM.js";
import "./chunk-Y3NYV3NU.js";
import "./chunk-MPXR7HT5.js";
import {
  productTagsQueryKeys,
  useProductTags
} from "./chunk-OMI2M33L.js";
import "./chunk-4QP6TRY2.js";
import "./chunk-WKVXAGJ4.js";
import "./chunk-MTIJOLRN.js";
import "./chunk-W5OVXSM3.js";
import "./chunk-F2QLOFUO.js";
import "./chunk-LHFWZMHR.js";
import "./chunk-SYV5SNLT.js";
import "./chunk-HZTIKFN6.js";
import "./chunk-VVFYDDT7.js";
import "./chunk-OBY5H4ES.js";
import "./chunk-VIDY2VVW.js";
import "./chunk-CQLZVZFY.js";
import "./chunk-KAPOO4V5.js";
import "./chunk-3APLRSSZ.js";
import "./chunk-MT32KGKB.js";
import "./chunk-HYIUH3A4.js";
import "./chunk-UWY4GNKH.js";
import "./chunk-XZA7URE7.js";
import "./chunk-X6CL4M66.js";
import "./chunk-ITDBSFWD.js";
import "./chunk-33KS7DQ7.js";
import "./chunk-4VIDBIP2.js";
import "./chunk-5SYURXII.js";
import "./chunk-QR3D3QJD.js";
import "./chunk-X7XNLRVH.js";
import "./chunk-KIJJ36HY.js";
import {
  queryClient
} from "./chunk-VMLNCWLE.js";
import "./chunk-CUPZIPFX.js";
import {
  sdk
} from "./chunk-YEE23PNJ.js";
import {
  useTranslation
} from "./chunk-7HWTQOXJ.js";
import "./chunk-5GF3RGIE.js";
import {
  Link,
  useLoaderData
} from "./chunk-T7YBVUWZ.js";
import {
  Button,
  Container,
  Heading,
  PencilSquare,
  Trash,
  createColumnHelper
} from "./chunk-OMPDROWC.js";
import "./chunk-5GLF3XJW.js";
import "./chunk-RPCDYKBN.js";
import "./chunk-VZFGHTQI.js";
import {
  keepPreviousData
} from "./chunk-R35JBZ3G.js";
import {
  require_jsx_runtime
} from "./chunk-KBTYAULA.js";
import {
  require_react
} from "./chunk-QCHXOAYK.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/@medusajs/dashboard/dist/product-tag-list-BQ2OY3AV.mjs
var import_react = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var productTagListQuery = (query) => ({
  queryKey: productTagsQueryKeys.list(query),
  queryFn: async () => sdk.admin.productTag.list(query)
});
var productTagListLoader = async ({ request }) => {
  const searchParams = new URL(request.url).searchParams;
  const queryObject = {};
  searchParams.forEach((value, key) => {
    try {
      queryObject[key] = JSON.parse(value);
    } catch (_e) {
      queryObject[key] = value;
    }
  });
  const query = productTagListQuery(
    queryObject
  );
  return queryClient.getQueryData(query.queryKey) ?? await queryClient.fetchQuery(query);
};
var PAGE_SIZE = 20;
var ProductTagListTable = () => {
  const { t } = useTranslation();
  const { searchParams, raw } = useProductTagTableQuery({
    pageSize: PAGE_SIZE
  });
  const initialData = useLoaderData();
  const { product_tags, count, isPending, isError, error } = useProductTags(
    searchParams,
    {
      initialData,
      placeholderData: keepPreviousData
    }
  );
  const columns = useColumns();
  const filters = useProductTagTableFilters();
  const { table } = useDataTable({
    data: product_tags,
    count,
    columns,
    getRowId: (row) => row.id,
    pageSize: PAGE_SIZE
  });
  if (isError) {
    throw error;
  }
  return (0, import_jsx_runtime.jsxs)(Container, { className: "divide-y px-0 py-0", children: [
    (0, import_jsx_runtime.jsxs)("div", { className: "flex items-center justify-between px-6 py-4", children: [
      (0, import_jsx_runtime.jsx)(Heading, { children: t("productTags.domain") }),
      (0, import_jsx_runtime.jsx)(Button, { variant: "secondary", size: "small", asChild: true, children: (0, import_jsx_runtime.jsx)(Link, { to: "create", children: t("actions.create") }) })
    ] }),
    (0, import_jsx_runtime.jsx)(
      _DataTable,
      {
        table,
        filters,
        queryObject: raw,
        isLoading: isPending,
        columns,
        pageSize: PAGE_SIZE,
        count,
        navigateTo: (row) => row.original.id,
        search: true,
        pagination: true,
        orderBy: [
          { key: "value", label: t("fields.value") },
          { key: "created_at", label: t("fields.createdAt") },
          { key: "updated_at", label: t("fields.updatedAt") }
        ]
      }
    )
  ] });
};
var ProductTagRowActions = ({
  productTag
}) => {
  const { t } = useTranslation();
  const handleDelete = useDeleteProductTagAction({ productTag });
  return (0, import_jsx_runtime.jsx)(
    ActionMenu,
    {
      groups: [
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(PencilSquare, {}),
              label: t("actions.edit"),
              to: `${productTag.id}/edit`
            }
          ]
        },
        {
          actions: [
            {
              icon: (0, import_jsx_runtime.jsx)(Trash, {}),
              label: t("actions.delete"),
              onClick: handleDelete
            }
          ]
        }
      ]
    }
  );
};
var columnHelper = createColumnHelper();
var useColumns = () => {
  const base = useProductTagTableColumns();
  return (0, import_react.useMemo)(
    () => [
      ...base,
      columnHelper.display({
        id: "actions",
        cell: ({ row }) => (0, import_jsx_runtime.jsx)(ProductTagRowActions, { productTag: row.original })
      })
    ],
    [base]
  );
};
var ProductTagList = () => {
  const { getWidgets } = useExtension();
  return (0, import_jsx_runtime2.jsx)(
    SingleColumnPage,
    {
      showMetadata: false,
      showJSON: false,
      hasOutlet: true,
      widgets: {
        after: getWidgets("product_tag.list.after"),
        before: getWidgets("product_tag.list.before")
      },
      children: (0, import_jsx_runtime2.jsx)(ProductTagListTable, {})
    }
  );
};
export {
  ProductTagList as Component,
  productTagListLoader as loader
};
//# sourceMappingURL=product-tag-list-BQ2OY3AV-5JZ7MHQL.js.map
